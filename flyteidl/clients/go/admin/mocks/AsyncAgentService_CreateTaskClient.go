// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"
)

// AsyncAgentService_CreateTaskClient is an autogenerated mock type for the AsyncAgentService_CreateTaskClient type
type AsyncAgentService_CreateTaskClient struct {
	mock.Mock
}

type AsyncAgentService_CreateTaskClient_CloseAndRecv struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_CloseAndRecv) Return(_a0 *admin.CreateTaskResponse, _a1 error) *AsyncAgentService_CreateTaskClient_CloseAndRecv {
	return &AsyncAgentService_CreateTaskClient_CloseAndRecv{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnCloseAndRecv() *AsyncAgentService_CreateTaskClient_CloseAndRecv {
	c_call := _m.On("CloseAndRecv")
	return &AsyncAgentService_CreateTaskClient_CloseAndRecv{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnCloseAndRecvMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_CloseAndRecv {
	c_call := _m.On("CloseAndRecv", matchers...)
	return &AsyncAgentService_CreateTaskClient_CloseAndRecv{Call: c_call}
}

// CloseAndRecv provides a mock function with given fields:
func (_m *AsyncAgentService_CreateTaskClient) CloseAndRecv() (*admin.CreateTaskResponse, error) {
	ret := _m.Called()

	var r0 *admin.CreateTaskResponse
	if rf, ok := ret.Get(0).(func() *admin.CreateTaskResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AsyncAgentService_CreateTaskClient_CloseSend struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_CloseSend) Return(_a0 error) *AsyncAgentService_CreateTaskClient_CloseSend {
	return &AsyncAgentService_CreateTaskClient_CloseSend{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnCloseSend() *AsyncAgentService_CreateTaskClient_CloseSend {
	c_call := _m.On("CloseSend")
	return &AsyncAgentService_CreateTaskClient_CloseSend{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnCloseSendMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_CloseSend {
	c_call := _m.On("CloseSend", matchers...)
	return &AsyncAgentService_CreateTaskClient_CloseSend{Call: c_call}
}

// CloseSend provides a mock function with given fields:
func (_m *AsyncAgentService_CreateTaskClient) CloseSend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncAgentService_CreateTaskClient_Context struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_Context) Return(_a0 context.Context) *AsyncAgentService_CreateTaskClient_Context {
	return &AsyncAgentService_CreateTaskClient_Context{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnContext() *AsyncAgentService_CreateTaskClient_Context {
	c_call := _m.On("Context")
	return &AsyncAgentService_CreateTaskClient_Context{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnContextMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_Context {
	c_call := _m.On("Context", matchers...)
	return &AsyncAgentService_CreateTaskClient_Context{Call: c_call}
}

// Context provides a mock function with given fields:
func (_m *AsyncAgentService_CreateTaskClient) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type AsyncAgentService_CreateTaskClient_Header struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_Header) Return(_a0 metadata.MD, _a1 error) *AsyncAgentService_CreateTaskClient_Header {
	return &AsyncAgentService_CreateTaskClient_Header{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnHeader() *AsyncAgentService_CreateTaskClient_Header {
	c_call := _m.On("Header")
	return &AsyncAgentService_CreateTaskClient_Header{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnHeaderMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_Header {
	c_call := _m.On("Header", matchers...)
	return &AsyncAgentService_CreateTaskClient_Header{Call: c_call}
}

// Header provides a mock function with given fields:
func (_m *AsyncAgentService_CreateTaskClient) Header() (metadata.MD, error) {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AsyncAgentService_CreateTaskClient_RecvMsg struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_RecvMsg) Return(_a0 error) *AsyncAgentService_CreateTaskClient_RecvMsg {
	return &AsyncAgentService_CreateTaskClient_RecvMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnRecvMsg(m interface{}) *AsyncAgentService_CreateTaskClient_RecvMsg {
	c_call := _m.On("RecvMsg", m)
	return &AsyncAgentService_CreateTaskClient_RecvMsg{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnRecvMsgMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_RecvMsg {
	c_call := _m.On("RecvMsg", matchers...)
	return &AsyncAgentService_CreateTaskClient_RecvMsg{Call: c_call}
}

// RecvMsg provides a mock function with given fields: m
func (_m *AsyncAgentService_CreateTaskClient) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncAgentService_CreateTaskClient_Send struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_Send) Return(_a0 error) *AsyncAgentService_CreateTaskClient_Send {
	return &AsyncAgentService_CreateTaskClient_Send{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnSend(_a0 *admin.CreateTaskRequest) *AsyncAgentService_CreateTaskClient_Send {
	c_call := _m.On("Send", _a0)
	return &AsyncAgentService_CreateTaskClient_Send{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnSendMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_Send {
	c_call := _m.On("Send", matchers...)
	return &AsyncAgentService_CreateTaskClient_Send{Call: c_call}
}

// Send provides a mock function with given fields: _a0
func (_m *AsyncAgentService_CreateTaskClient) Send(_a0 *admin.CreateTaskRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*admin.CreateTaskRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncAgentService_CreateTaskClient_SendMsg struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_SendMsg) Return(_a0 error) *AsyncAgentService_CreateTaskClient_SendMsg {
	return &AsyncAgentService_CreateTaskClient_SendMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnSendMsg(m interface{}) *AsyncAgentService_CreateTaskClient_SendMsg {
	c_call := _m.On("SendMsg", m)
	return &AsyncAgentService_CreateTaskClient_SendMsg{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnSendMsgMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_SendMsg {
	c_call := _m.On("SendMsg", matchers...)
	return &AsyncAgentService_CreateTaskClient_SendMsg{Call: c_call}
}

// SendMsg provides a mock function with given fields: m
func (_m *AsyncAgentService_CreateTaskClient) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncAgentService_CreateTaskClient_Trailer struct {
	*mock.Call
}

func (_m AsyncAgentService_CreateTaskClient_Trailer) Return(_a0 metadata.MD) *AsyncAgentService_CreateTaskClient_Trailer {
	return &AsyncAgentService_CreateTaskClient_Trailer{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_CreateTaskClient) OnTrailer() *AsyncAgentService_CreateTaskClient_Trailer {
	c_call := _m.On("Trailer")
	return &AsyncAgentService_CreateTaskClient_Trailer{Call: c_call}
}

func (_m *AsyncAgentService_CreateTaskClient) OnTrailerMatch(matchers ...interface{}) *AsyncAgentService_CreateTaskClient_Trailer {
	c_call := _m.On("Trailer", matchers...)
	return &AsyncAgentService_CreateTaskClient_Trailer{Call: c_call}
}

// Trailer provides a mock function with given fields:
func (_m *AsyncAgentService_CreateTaskClient) Trailer() metadata.MD {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	return r0
}
