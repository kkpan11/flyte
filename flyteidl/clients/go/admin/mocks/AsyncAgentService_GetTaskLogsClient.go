// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"
)

// AsyncAgentService_GetTaskLogsClient is an autogenerated mock type for the AsyncAgentService_GetTaskLogsClient type
type AsyncAgentService_GetTaskLogsClient struct {
	mock.Mock
}

type AsyncAgentService_GetTaskLogsClient_CloseSend struct {
	*mock.Call
}

func (_m AsyncAgentService_GetTaskLogsClient_CloseSend) Return(_a0 error) *AsyncAgentService_GetTaskLogsClient_CloseSend {
	return &AsyncAgentService_GetTaskLogsClient_CloseSend{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnCloseSend() *AsyncAgentService_GetTaskLogsClient_CloseSend {
	c_call := _m.On("CloseSend")
	return &AsyncAgentService_GetTaskLogsClient_CloseSend{Call: c_call}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnCloseSendMatch(matchers ...interface{}) *AsyncAgentService_GetTaskLogsClient_CloseSend {
	c_call := _m.On("CloseSend", matchers...)
	return &AsyncAgentService_GetTaskLogsClient_CloseSend{Call: c_call}
}

// CloseSend provides a mock function with given fields:
func (_m *AsyncAgentService_GetTaskLogsClient) CloseSend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncAgentService_GetTaskLogsClient_Context struct {
	*mock.Call
}

func (_m AsyncAgentService_GetTaskLogsClient_Context) Return(_a0 context.Context) *AsyncAgentService_GetTaskLogsClient_Context {
	return &AsyncAgentService_GetTaskLogsClient_Context{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnContext() *AsyncAgentService_GetTaskLogsClient_Context {
	c_call := _m.On("Context")
	return &AsyncAgentService_GetTaskLogsClient_Context{Call: c_call}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnContextMatch(matchers ...interface{}) *AsyncAgentService_GetTaskLogsClient_Context {
	c_call := _m.On("Context", matchers...)
	return &AsyncAgentService_GetTaskLogsClient_Context{Call: c_call}
}

// Context provides a mock function with given fields:
func (_m *AsyncAgentService_GetTaskLogsClient) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type AsyncAgentService_GetTaskLogsClient_Header struct {
	*mock.Call
}

func (_m AsyncAgentService_GetTaskLogsClient_Header) Return(_a0 metadata.MD, _a1 error) *AsyncAgentService_GetTaskLogsClient_Header {
	return &AsyncAgentService_GetTaskLogsClient_Header{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnHeader() *AsyncAgentService_GetTaskLogsClient_Header {
	c_call := _m.On("Header")
	return &AsyncAgentService_GetTaskLogsClient_Header{Call: c_call}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnHeaderMatch(matchers ...interface{}) *AsyncAgentService_GetTaskLogsClient_Header {
	c_call := _m.On("Header", matchers...)
	return &AsyncAgentService_GetTaskLogsClient_Header{Call: c_call}
}

// Header provides a mock function with given fields:
func (_m *AsyncAgentService_GetTaskLogsClient) Header() (metadata.MD, error) {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AsyncAgentService_GetTaskLogsClient_Recv struct {
	*mock.Call
}

func (_m AsyncAgentService_GetTaskLogsClient_Recv) Return(_a0 *admin.GetTaskLogsResponse, _a1 error) *AsyncAgentService_GetTaskLogsClient_Recv {
	return &AsyncAgentService_GetTaskLogsClient_Recv{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnRecv() *AsyncAgentService_GetTaskLogsClient_Recv {
	c_call := _m.On("Recv")
	return &AsyncAgentService_GetTaskLogsClient_Recv{Call: c_call}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnRecvMatch(matchers ...interface{}) *AsyncAgentService_GetTaskLogsClient_Recv {
	c_call := _m.On("Recv", matchers...)
	return &AsyncAgentService_GetTaskLogsClient_Recv{Call: c_call}
}

// Recv provides a mock function with given fields:
func (_m *AsyncAgentService_GetTaskLogsClient) Recv() (*admin.GetTaskLogsResponse, error) {
	ret := _m.Called()

	var r0 *admin.GetTaskLogsResponse
	if rf, ok := ret.Get(0).(func() *admin.GetTaskLogsResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetTaskLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AsyncAgentService_GetTaskLogsClient_RecvMsg struct {
	*mock.Call
}

func (_m AsyncAgentService_GetTaskLogsClient_RecvMsg) Return(_a0 error) *AsyncAgentService_GetTaskLogsClient_RecvMsg {
	return &AsyncAgentService_GetTaskLogsClient_RecvMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnRecvMsg(m interface{}) *AsyncAgentService_GetTaskLogsClient_RecvMsg {
	c_call := _m.On("RecvMsg", m)
	return &AsyncAgentService_GetTaskLogsClient_RecvMsg{Call: c_call}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnRecvMsgMatch(matchers ...interface{}) *AsyncAgentService_GetTaskLogsClient_RecvMsg {
	c_call := _m.On("RecvMsg", matchers...)
	return &AsyncAgentService_GetTaskLogsClient_RecvMsg{Call: c_call}
}

// RecvMsg provides a mock function with given fields: m
func (_m *AsyncAgentService_GetTaskLogsClient) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncAgentService_GetTaskLogsClient_SendMsg struct {
	*mock.Call
}

func (_m AsyncAgentService_GetTaskLogsClient_SendMsg) Return(_a0 error) *AsyncAgentService_GetTaskLogsClient_SendMsg {
	return &AsyncAgentService_GetTaskLogsClient_SendMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnSendMsg(m interface{}) *AsyncAgentService_GetTaskLogsClient_SendMsg {
	c_call := _m.On("SendMsg", m)
	return &AsyncAgentService_GetTaskLogsClient_SendMsg{Call: c_call}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnSendMsgMatch(matchers ...interface{}) *AsyncAgentService_GetTaskLogsClient_SendMsg {
	c_call := _m.On("SendMsg", matchers...)
	return &AsyncAgentService_GetTaskLogsClient_SendMsg{Call: c_call}
}

// SendMsg provides a mock function with given fields: m
func (_m *AsyncAgentService_GetTaskLogsClient) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncAgentService_GetTaskLogsClient_Trailer struct {
	*mock.Call
}

func (_m AsyncAgentService_GetTaskLogsClient_Trailer) Return(_a0 metadata.MD) *AsyncAgentService_GetTaskLogsClient_Trailer {
	return &AsyncAgentService_GetTaskLogsClient_Trailer{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnTrailer() *AsyncAgentService_GetTaskLogsClient_Trailer {
	c_call := _m.On("Trailer")
	return &AsyncAgentService_GetTaskLogsClient_Trailer{Call: c_call}
}

func (_m *AsyncAgentService_GetTaskLogsClient) OnTrailerMatch(matchers ...interface{}) *AsyncAgentService_GetTaskLogsClient_Trailer {
	c_call := _m.On("Trailer", matchers...)
	return &AsyncAgentService_GetTaskLogsClient_Trailer{Call: c_call}
}

// Trailer provides a mock function with given fields:
func (_m *AsyncAgentService_GetTaskLogsClient) Trailer() metadata.MD {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	return r0
}
