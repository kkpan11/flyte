// @generated by protoc-gen-connect-es v1.3.0 with parameter "target=ts"
// @generated from file flyteidl/cacheservice/cacheservice.proto (package flyteidl.cacheservice, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeleteCacheRequest, DeleteCacheResponse, GetCacheRequest, GetCacheResponse, GetOrExtendReservationRequest, GetOrExtendReservationResponse, PutCacheRequest, PutCacheResponse, ReleaseReservationRequest, ReleaseReservationResponse } from "./cacheservice_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * CacheService defines operations for cache management including retrieval, storage, and deletion of cached task/workflow outputs.
 *
 * @generated from service flyteidl.cacheservice.CacheService
 */
export const CacheService = {
  typeName: "flyteidl.cacheservice.CacheService",
  methods: {
    /**
     * Retrieves cached data by key.
     *
     * @generated from rpc flyteidl.cacheservice.CacheService.Get
     */
    get: {
      name: "Get",
      I: GetCacheRequest,
      O: GetCacheResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Stores or updates cached data by key.
     *
     * @generated from rpc flyteidl.cacheservice.CacheService.Put
     */
    put: {
      name: "Put",
      I: PutCacheRequest,
      O: PutCacheResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes cached data by key.
     *
     * @generated from rpc flyteidl.cacheservice.CacheService.Delete
     */
    delete: {
      name: "Delete",
      I: DeleteCacheRequest,
      O: DeleteCacheResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get or extend a reservation for a cache key
     *
     * @generated from rpc flyteidl.cacheservice.CacheService.GetOrExtendReservation
     */
    getOrExtendReservation: {
      name: "GetOrExtendReservation",
      I: GetOrExtendReservationRequest,
      O: GetOrExtendReservationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Release the reservation for a cache key
     *
     * @generated from rpc flyteidl.cacheservice.CacheService.ReleaseReservation
     */
    releaseReservation: {
      name: "ReleaseReservation",
      I: ReleaseReservationRequest,
      O: ReleaseReservationResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

